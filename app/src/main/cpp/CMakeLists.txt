# Define the minimum version of CMake required to use this CMakeList.
# Some functions don't exist in previous version of CMake by exampe.
cmake_minimum_required(VERSION 3.4.1)

# Define a name for this project. It will be accessible with ${PROJECT_NAME}.
project(calculator)

# Create a library with the name defined for the project.
# Set it as SHARED library (will generate a .so file)
# Set the source file
add_library(
        ${PROJECT_NAME}
        SHARED
        Calculator.cpp)

# Define a variable called "subdirectory_DIR" with the following value
set(
        subdirectory_DIR
        ${CMAKE_CURRENT_SOURCE_DIR}/../../../../subdirectory)
# Indicate that we will use the CMakeList define at the following path.
add_subdirectory(
        ${subdirectory_DIR}
        ./subdirectory
)
# Add the library generated by the other CMakeList in the output of this project.
target_link_libraries(
        ${PROJECT_NAME}
        subdirectoryLibrary
)

# Import an already existing .so file
# Here, we add a dependency to the shared_library prebuilt
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../../../shared_library/include/)
set(
        SHARED_LIBRARY_SO
        ${CMAKE_CURRENT_SOURCE_DIR}/../../../../shared_library/prebuilt/debug/${CMAKE_ANDROID_ARCH_ABI}/libsharedLibrary.so
)
# IMPORTED allows to depends on a library file outside the project.
add_library(
        sharedLibrary
        SHARED
        IMPORTED
)
# IMPORTED_LOCATION specifies the location of the library file on disk
set_target_properties(
        sharedLibrary
        PROPERTIES
        IMPORTED_LOCATION ${SHARED_LIBRARY_SO}
)
# Add the library to this project
target_link_libraries(
        ${PROJECT_NAME}
        sharedLibrary
)

# Import an already existing .a file
# Here, we add a dependency to the shared_library prebuilt
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../../../static_library/include/)
set(
        STATIC_LIBRARY_A
        ${CMAKE_CURRENT_SOURCE_DIR}/../../../../static_library/prebuilt/debug/${CMAKE_ANDROID_ARCH_ABI}/libstaticLibrary.a
)
# IMPORTED allows to depends on a library file outside the project.
add_library(
        staticLibrary
        STATIC
        IMPORTED
)
# IMPORTED_LOCATION specifies the location of the library file on disk
set_target_properties(
        staticLibrary
        PROPERTIES
        IMPORTED_LOCATION ${STATIC_LIBRARY_A}
)
# Add the library to this project
target_link_libraries(
        ${PROJECT_NAME}
        staticLibrary
)